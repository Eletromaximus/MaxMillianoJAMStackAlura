{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/maximus/Documentos/portifolio/src/components/fundation/Text/index.tsx\";\nimport styled, { css } from 'styled-components';\nimport PropTypes from 'prop-types';\nimport propToStyle from '../../theme/utils/propToStyle'; // eslint-disable-next-line no-use-before-define\n\nimport React from 'react';\nimport typographyVariants from '../../theme/typographyVariants';\nconst smallestException = css`\n  font-size: ${() => typographyVariants.smallestException.fontSize};\n  font-weight: ${() => typographyVariants.smallestException.fontWeight};\n  line-height: ${() => typographyVariants.smallestException.lineHeight};\n`;\nconst paragraph1 = css`\n  font-size: ${() => typographyVariants.paragraph1.fontSize};\n  font-weight: ${() => typographyVariants.paragraph1.fontWeight};\n  line-height: ${() => typographyVariants.paragraph1.lineHeight};\n`;\nexport const TextStyleVariants = {\n  smallestException,\n  paragraph1\n};\nconst TextBase = styled.span`\n  ${({\n  variant\n}) => TextStyleVariants[variant]}\n  ${propToStyle('textAlign')}\n`;\nexport default function Text({\n  tag,\n  variant,\n  children,\n  textAlign,\n  color\n}) {\n  return /*#__PURE__*/_jsxDEV(TextBase, {\n    as: tag,\n    variant: variant,\n    textAlign: textAlign,\n    color: color,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\nText.prototype = {\n  tag: PropTypes.string.isRequired,\n  variant: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n};\nText.defaultProps = {\n  tag: 'span',\n  variant: 'paragraph1'\n};","map":{"version":3,"sources":["/home/maximus/Documentos/portifolio/src/components/fundation/Text/index.tsx"],"names":["styled","css","PropTypes","propToStyle","React","typographyVariants","smallestException","fontSize","fontWeight","lineHeight","paragraph1","TextStyleVariants","TextBase","span","variant","Text","tag","children","textAlign","color","prototype","string","isRequired","node","defaultProps"],"mappings":";;AAAA,OAAOA,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AAUA,MAAMC,iBAAiB,GAAGL,GAAI;AAC9B,eAAe,MAAMI,kBAAkB,CAACC,iBAAnB,CAAqCC,QAAS;AACnE,iBAAiB,MAAMF,kBAAkB,CAACC,iBAAnB,CAAqCE,UAAW;AACvE,iBAAiB,MAAMH,kBAAkB,CAACC,iBAAnB,CAAqCG,UAAW;AACvE,CAJA;AAKA,MAAMC,UAAU,GAAGT,GAAI;AACvB,eAAe,MAAMI,kBAAkB,CAACK,UAAnB,CAA8BH,QAAS;AAC5D,iBAAiB,MAAMF,kBAAkB,CAACK,UAAnB,CAA8BF,UAAW;AAChE,iBAAiB,MAAMH,kBAAkB,CAACK,UAAnB,CAA8BD,UAAW;AAChE,CAJA;AAMA,OAAO,MAAME,iBAAsC,GAAG;AACpDL,EAAAA,iBADoD;AAEpDI,EAAAA;AAFoD,CAA/C;AAKP,MAAME,QAAQ,GAAGZ,MAAM,CAACa,IAAY;AACpC,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiBH,iBAAiB,CAACG,OAAD,CAAU;AAChD,IAAIX,WAAW,CAAC,WAAD,CAAc;AAC7B,CAHA;AAKA,eAAe,SAASY,IAAT,CAAe;AAAEC,EAAAA,GAAF;AAAOF,EAAAA,OAAP;AAAgBG,EAAAA,QAAhB;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA;AAArC,CAAf,EAAoE;AACjF,sBAEE,QAAC,QAAD;AAAU,IAAA,EAAE,EAAEH,GAAd;AAAmB,IAAA,OAAO,EAAEF,OAA5B;AAAqC,IAAA,SAAS,EAAEI,SAAhD;AAA2D,IAAA,KAAK,EAAEC,KAAlE;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UAFF;AAMD;AAEDF,IAAI,CAACK,SAAL,GAAiB;AACfJ,EAAAA,GAAG,EAAEd,SAAS,CAACmB,MAAV,CAAiBC,UADP;AAEfR,EAAAA,OAAO,EAAEZ,SAAS,CAACmB,MAAV,CAAiBC,UAFX;AAGfL,EAAAA,QAAQ,EAAEf,SAAS,CAACqB,IAAV,CAAeD;AAHV,CAAjB;AAMAP,IAAI,CAACS,YAAL,GAAoB;AAClBR,EAAAA,GAAG,EAAE,MADa;AAElBF,EAAAA,OAAO,EAAE;AAFS,CAApB","sourcesContent":["import styled, { css } from 'styled-components'\nimport PropTypes from 'prop-types'\nimport propToStyle from '../../theme/utils/propToStyle'\n// eslint-disable-next-line no-use-before-define\nimport React from 'react'\nimport typographyVariants from '../../theme/typographyVariants'\n\ninterface Props {\n  tag?: 'p' | 'span' | 'h1' | undefined;\n  variant: string;\n  textAlign?: string | object;\n  color?: string;\n  children: string | number | React.ReactNode;\n}\n\nconst smallestException = css`\n  font-size: ${() => typographyVariants.smallestException.fontSize};\n  font-weight: ${() => typographyVariants.smallestException.fontWeight};\n  line-height: ${() => typographyVariants.smallestException.lineHeight};\n`\nconst paragraph1 = css`\n  font-size: ${() => typographyVariants.paragraph1.fontSize};\n  font-weight: ${() => typographyVariants.paragraph1.fontWeight};\n  line-height: ${() => typographyVariants.paragraph1.lineHeight};\n`\n\nexport const TextStyleVariants: Record<string, any> = {\n  smallestException,\n  paragraph1\n}\n\nconst TextBase = styled.span<Props>`\n  ${({ variant }) => TextStyleVariants[variant]}\n  ${propToStyle('textAlign')}\n`\n\nexport default function Text ({ tag, variant, children, textAlign, color }: Props) {\n  return (\n\n    <TextBase as={tag} variant={variant} textAlign={textAlign} color={color}>\n      {children}\n    </TextBase>\n  )\n}\n\nText.prototype = {\n  tag: PropTypes.string.isRequired,\n  variant: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n}\n\nText.defaultProps = {\n  tag: 'span',\n  variant: 'paragraph1'\n}\n"]},"metadata":{},"sourceType":"module"}