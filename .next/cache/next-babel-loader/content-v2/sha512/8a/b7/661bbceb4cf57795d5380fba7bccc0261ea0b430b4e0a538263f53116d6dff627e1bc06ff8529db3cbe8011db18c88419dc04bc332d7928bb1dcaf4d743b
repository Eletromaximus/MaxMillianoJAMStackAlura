{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from 'styled-components';\nimport breakpointsMedia from './breakpointsMedia';\nexport default function propToStyle(propName) {\n  return props => {\n    const propValue = props[propName];\n\n    if (typeof propValue === 'string' || typeof propValue === 'number') {\n      return {\n        [propName]: propValue\n      };\n    }\n\n    if (typeof propValue === 'object') {\n      return css([\"\", \"\"], breakpointsMedia(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, propValue.xs && {\n        xs: {\n          [propName]: propValue.xs\n        }\n      }), propValue.sm && {\n        sm: {\n          [propName]: propValue.sm\n        }\n      }), propValue.md && {\n        md: {\n          [propName]: propValue.md\n        }\n      }), propValue.lg && {\n        lg: {\n          [propName]: propValue.lg\n        }\n      }), propValue.xl && {\n        xl: {\n          [propName]: propValue.xl\n        }\n      })));\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}